{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JoeBr\\\\Desktop\\\\theNewGenius\\\\client\\\\src\\\\components\\\\Login.js\";\nimport React, { useState } from \"react\";\n\nfunction Login(props) {\n  var loginName;\n  var loginPassword;\n  const [message, setMessage] = useState(\"\");\n\n  const doLogin = async event => {\n    event.preventDefault();\n    var body = '{\"username\":\"' + loginName.value + '\",\"password\":\"' + loginPassword.value + '\"}';\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", \"http://my-gym-pro.herokuapp.com/api/login\", true);\n    xhr.setRequestHeader(\"Content-type\", \"application/json; charset=UTF-8\");\n\n    try {\n      xhr.onreadystatechange = function () {\n        if (this.readyState == 4 && this.status == 200) {\n          var res = JSON.parse(xhr.responseText);\n\n          if (res.Error == 'Username does not exist.') {\n            setMessage(\"Username does not exist.\");\n            return;\n          }\n\n          if (res.Error == 'Incorrect password.') {\n            setMessage('Incorrect password.');\n            return;\n          }\n\n          if (res.Error == 'Email has not been verified.') {\n            setMessage('Email has not been verified.');\n            return;\n          }\n\n          var user = {\n            username: loginName.value,\n            id: res.id,\n            access_token: res.AccessToken\n          };\n          localStorage.setItem(\"user_data\", JSON.stringify(user));\n          setMessage(\"\");\n          window.location.href = \"/access\";\n        }\n      };\n\n      xhr.send(body);\n    } catch (e) {\n      alert(e.toString());\n      return;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"loginDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: doLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"inner-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"PLEASE LOG IN\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"loginName\",\n    placeholder: \"Username\",\n    ref: c => loginName = c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    id: \"loginPassword\",\n    placeholder: \"Password\",\n    ref: c => loginPassword = c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    id: \"loginButton\",\n    class: \"buttons\",\n    value: \"Do It\",\n    onClick: doLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    id: \"loginResult\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, message));\n}\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/JoeBr/Desktop/theNewGenius/client/src/components/Login.js"],"names":["React","useState","Login","props","loginName","loginPassword","message","setMessage","doLogin","event","preventDefault","body","value","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","res","JSON","parse","responseText","Error","user","username","id","access_token","AccessToken","localStorage","setItem","stringify","window","location","href","send","e","alert","toString","c"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Login(props) {\r\n  var loginName;\r\n  var loginPassword;\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const doLogin = async (event) => {\r\n    event.preventDefault();\r\n\r\n      var body = '{\"username\":\"' + loginName.value + '\",\"password\":\"' + loginPassword.value + '\"}';\r\n    var xhr = new XMLHttpRequest();\r\n\txhr.open(\"POST\", \"http://my-gym-pro.herokuapp.com/api/login\", true);\r\n\txhr.setRequestHeader(\"Content-type\", \"application/json; charset=UTF-8\");\r\n       try\r\n\t{\r\n\t\txhr.onreadystatechange = function() \r\n\t\t{\r\n\t\t\tif (this.readyState == 4 && this.status == 200) \r\n\t\t\t{\r\n\t\t\t\tvar res = JSON.parse(xhr.responseText);\r\n      \r\n      if (res.Error == 'Username does not exist.')\r\n      {\r\n        setMessage(\"Username does not exist.\");\r\n        return;\r\n      }\r\n      if (res.Error == 'Incorrect password.')\r\n      {\r\n        setMessage('Incorrect password.');\r\n        return;\r\n      }\r\n      if (res.Error == 'Email has not been verified.')\r\n      {\r\n        setMessage('Email has not been verified.');\r\n        return;\r\n      }\r\n      \r\n        var user = {\r\n          username: loginName.value,\r\n          id: res.id,\r\n          access_token: res.AccessToken\r\n        };\r\n        \r\n        localStorage.setItem(\"user_data\", JSON.stringify(user));\r\n\r\n        setMessage(\"\");\r\n        window.location.href = \"/access\";\r\n\t\t\t}\r\n\t\t};\r\n\t\txhr.send(body);\r\n\r\n       \r\n    } catch (e) {\r\n      alert(e.toString());\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"loginDiv\">\r\n      <form onSubmit={doLogin}>\r\n        <span id=\"inner-title\">PLEASE LOG IN</span>\r\n        <input\r\n          type=\"text\"\r\n          id=\"loginName\"\r\n          placeholder=\"Username\"\r\n          ref={(c) => (loginName = c)}\r\n        />\r\n        <br />\r\n        <input\r\n          type=\"password\"\r\n          id=\"loginPassword\"\r\n          placeholder=\"Password\"\r\n          ref={(c) => (loginPassword = c)}\r\n        />\r\n        <br />\r\n        <input\r\n          type=\"submit\"\r\n          id=\"loginButton\"\r\n          class=\"buttons\"\r\n          value=\"Do It\"\r\n          onClick={doLogin}\r\n        />\r\n      </form>\r\n      <span id=\"loginResult\">{message}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}